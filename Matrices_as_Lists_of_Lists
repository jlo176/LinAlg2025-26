# Matrices as Lists of Lists
# A simple introduction to handling matrices as lists of lists in Python
# Patrick Honner 9/21/22

# Need this to deepcopy lists
import copy

# Makes presenting a table of data easier
from tabulate import tabulate

def row(A, n):
  return A[n]

def col(A, n):
  c = list()
  for i in range(len(A)):
    c.append(A[i][n])
  return c

def changeEntry(A, x, y, n):
  A[x][y] = n

def addRow(A, target, row, scalar):
  for i in range(len(A[row])):
    A[target][i] += scalar * A[row][i]

def multiplyRow(A, target, scalar):
  for i in range(len(A[target])):
    A[target][i] *= scalar

def swapRow(A, row1, row2):
  for i in range(len(A[row1])):
    temp = A[row1][i]
    A[row1][i] = A[row2][i]
    A[row2][i] = temp

def pivot(A, row):
    for i in range(len(A[row])):
        if A[row][i] != 0:
            return i
    return -1

def ref_helper(A, row):
    p = pivot(A, row)
    if p == -1:
        return  # Skip zero row
    multiplyRow(A, row, 1 / A[row][p])
    for i in range(row + 1, len(A)):
        factor = -A[i][p]
        addRow(A, i, row, factor)

def sort_pivot(A, row):
    min_row = row
    min_pivot = pivot(A, row)
    for i in range(row + 1, len(A)):
        piv = pivot(A, i)
        if piv != -1 and (min_pivot == -1 or piv < min_pivot):
            min_row = i
            min_pivot = piv
    swapRow(A, row, min_row)

def ref(A):
    row = 0
    while row < len(A):
        sort_pivot(A, row)
        if pivot(A, row) == -1:
            row += 1
            continue
        ref_helper(A, row)
        row += 1

def rref(A):
    ref(A) 
    for i in range(rows - 1, -1, -1):
        if pivot(A, i) == -1:
            continue 
        for j in range(i - 1, -1, -1):
            addRow(A, j, i, -A[j][pivot(A, i)])

#main
rows = int(input("enter number of rows: "))
cols = int(input("enter number of cols: "))
M = [[0 for _ in range(cols)] for _ in range(rows)]
for i in range(rows * cols):
  M[int(i / cols)][i % cols] = int(input("enter next entry: "))
  print(tabulate(M))
rref(M)
print(tabulate(M))
